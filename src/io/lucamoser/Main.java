package io.lucamoser;

import jota.utils.Converter;

import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class Main {

    private final static int HASHERS_COUNT = 4;
    private final static int HASH_LENGTH_TRITS = 243;
    private final static int NUMBER_OF_ROUNDS = 81;

    private static AtomicInteger count = new AtomicInteger();

    public static void main(String[] args) throws InterruptedException {
        String[] txsTrytes = {


        };

        // conversion from tryte strings to ints (iota-java returns an int array) to bytes
        int[][] txTritsInt = new int[txsTrytes.length][];
        for (int i = 0; i < txsTrytes.length; i++) {
            txTritsInt[i] = Converter.trits(txsTrytes[i]);
        }
        byte[][] txTritsBytes = new byte[txsTrytes.length][];
        for (int i = 0; i < txTritsInt.length; i++) {
            txTritsBytes[i] = new byte[txTritsInt[0].length];
            for (int j = 0; j < txTritsInt[0].length; j++) {
                txTritsBytes[i][j] = (byte) txTritsInt[i][j];
            }
        }

        if (args.length > 0) {
            runSlowCurl(txTritsBytes);
            return;
        }
        runBatchedBCTCurl(txTritsBytes);

    }

    public static void printHash(byte[] trits) {
        int[] intArray = new int[trits.length];
        for (int i = 0; i < trits.length; i++) {
            intArray[i] = (int) trits[i];
        }
        System.out.println(Converter.trytes(intArray));
    }

    public static void printHashesPerSecond() throws InterruptedException {
        int last = 0;
        for (; ; ) {
            Thread.sleep(TimeUnit.SECONDS.toMillis(1));
            int hashed = count.get();
            System.out.printf("hashed %d (%d/s)\r", hashed, hashed - last);
            last = hashed;
        }
    }

    public static void runBatchedBCTCurl(byte[][] txTrits) throws InterruptedException {
        BatchHasher[] hashers = new BatchHasher[HASHERS_COUNT];
        for (int i = 0; i < HASHERS_COUNT; i++) {
            hashers[i] = new BatchHasher(HASH_LENGTH_TRITS, NUMBER_OF_ROUNDS);
        }

        ExecutorService feedThreadsPool = Executors.newFixedThreadPool(HASHERS_COUNT);
        for (int i = 0; i < HASHERS_COUNT; i++) {
            final int id = i;
            feedThreadsPool.submit(() -> {
                try {
                    Random random = new Random();
                    for (; ; ) {
                        HashReq req = new HashReq();
                        req.input = txTrits[random.nextInt(txTrits.length)];
                        req.callback = trits -> {
                            count.incrementAndGet();
                        };
                        hashers[id].hash(req);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
        }

        ExecutorService hashersPool = Executors.newFixedThreadPool(HASHERS_COUNT);
        for (int i = 0; i < HASHERS_COUNT; i++) {
            final int id = i;
            hashersPool.submit(() -> {
                try {
                    hashers[id].runDispatcher();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
        }

        printHashesPerSecond();
    }

    public static void runSlowCurl(byte[][] txTrits) throws InterruptedException {
        byte[] hashTrits = new byte[Curl.HASH_LENGTH];
        Thread curlThread = new Thread(() -> {
            Random random = new Random();
            for (; ; ) {
                Curl curl = new Curl();
                curl.absorb(txTrits[random.nextInt() % txTrits.length], 0, txTrits.length);
                curl.squeeze(hashTrits, 0, Curl.HASH_LENGTH);
                count.incrementAndGet();
            }
        });
        curlThread.start();

        printHashesPerSecond();
    }
}
